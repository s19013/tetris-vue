export default class Rotate {

    constructor({
        fieldWidth,
        fieldHeight,
        checkCanMove
    }) {
        // index„Å®„Åã„ÅÆÈñ¢‰øÇ„Åß - 1„Åô„Çã
        this.fieldWidth   = fieldWidth - 1
        this.fieldHeight  = fieldHeight - 1;
        this.checkCanMove = checkCanMove
    }

    
    // „Åì„Åì„ÅßÂÖ®ÈÉ®Âèó„ÅëÂèñ„Å£„Å¶„Ç∑„É•„Éü„É¨„Éº„Ç∑„Éß„É≥„Åï„Åõ„Åü„Çä„Åô„Çã„Åã
    // ÂõûËª¢Ëª∏„Åï„Åà„ÅÑ„Åò„Çå„Å∞t„Çπ„Éî„É≥Ë°å„Åë„Åù„ÅÜ

    /**
     * @param Field ‰ªäÁèæÂú®„ÅÆ„Éï„Ç£„Éº„É´„Éâ
     * @param direction ÂõûËª¢„ÅÆÊñπÂêë
     * @param tetrimino ‰ªä„ÅÆ„Éñ„É≠„ÉÉ„ÇØ„ÅÆÁä∂ÊÖã
     */
    rotation({
        Field,
        direction,
        tetrimino
    }){
        // Ëâ≤„ÄÖÂõû„Åó„Å¶„Åø„Å¶„Ç∑„É•„Éü„É¨„Éº„Ç∑„Éß„É≥„Åó„Å¶„ÅÑ„Åè
        /** ÂÆüÈöõ„Å´„Åæ„Çè„Åó„Å¶„Åø„ÅüÁä∂ÊÖã
         *  ÂÆ£Ë®Ä„Å™„ÅÆ„Åß‰ªä„ÅØ„Ç≥„Éî„Éº„Åó„Åü„Å†„Åë„ÅÆÁä∂ÊÖã
         */
        let tentativeCoordinate = null

        if (direction == "clockwise" ) {
            // Âõû„Åó„Åü„ÅÆ„Çí‰ª£ÂÖ•
            tentativeCoordinate = tetrimino.Coordinate.map(block => {
                return this.clockwise({
                    rotationPoint:tetrimino.Coordinate[tetrimino.clockwiseAxis],
                    beforeRotation:block
                })
            })

            /** ÂõûËª¢„Åó„Åü„Éñ„É≠„ÉÉ„ÇØ„ÅåÂ£Å„ÇÑÂ∫äÔΩ§Êó¢Â≠ò„ÅÆ„Éñ„É≠„ÉÉ„ÇØ„Å®Ë¢´„Å£„Å¶„ÅÑ„Çã„Åã„Å©„ÅÜ„ÅãË™ø„Åπ„Çã */
            try {
                tentativeCoordinate = this.checkIfThereIsACoveredBlock({
                    Field:Field,
                    tetriminoCoordinate:tentativeCoordinate,
                    rotationIndex:tetrimino.clockwiseAxis
                })
            } catch (error) {
                console.log(error);
                /** „Ç®„É©„Éº„ÅåËµ∑„Åç„Åü
                 * „Å§„Åæ„ÇäÂõû„Åõ„Å™„Åã„Å£„Åü„ÅÆ„Åß„Åù„ÅÆ„Åæ„ÅæÂ∏∞„Åô 
                 */
                return tetrimino
            }

        } else {
            tentativeCoordinate = tetrimino.Coordinate.map(block => {
                return this.counterClockwise({
                    rotationPoint:tetrimino.Coordinate[tetrimino.counterClockwiseAxis],
                    beforeRotation:block
                })
            })

            /** ÂõûËª¢„Åó„Åü„Éñ„É≠„ÉÉ„ÇØ„ÅåÂ£Å„ÇÑÂ∫äÔΩ§Êó¢Â≠ò„ÅÆ„Éñ„É≠„ÉÉ„ÇØ„Å®Ë¢´„Å£„Å¶„ÅÑ„Çã„Åã„Å©„ÅÜ„ÅãË™ø„Åπ„Çã */
            try {
                tentativeCoordinate = this.checkIfThereIsACoveredBlock({
                    Field:Field,
                    tetriminoCoordinate:tentativeCoordinate,
                    rotationIndex:tetrimino.counterClockwiseAxis
                })
            } catch (error) {
                console.log(error);
                /** „Ç®„É©„Éº„ÅåËµ∑„Åç„Åü
                 * „Å§„Åæ„ÇäÂõû„Åõ„Å™„Åã„Å£„Åü„ÅÆ„Åß„Åù„ÅÆ„Åæ„ÅæÂ∏∞„Åô 
                 */
                return tetrimino
            }
        } 

        /** ‰ΩçÁΩÆ„ÇíÊõ¥Êñ∞ */
        tetrimino.Coordinate = tentativeCoordinate

        return tetrimino
    }

    /** ÂõûËª¢ÂâçÁÇπ{a,b} ÂõûËª¢ÁÇπ {c,d} */
    /** X = (a - c)cosùúÉ - (b - d)sinùúÉ + c */
    /** Y = (a - c)sinùúÉ + (b - d)cosùúÉ + d */

    // Math.cos„Å®„Åã„ÅØ„Å™„Çì„Åã„ÇÑ„ÇÑ„Åì„Åó„ÅÑ„ÅóÔΩ§‰ªäÂõû„ÅØ90Â∫¶„Åó„Åã‰Ωø„Çè„Å™„ÅÑ„ÅÆ„Åß‰Ωø„Çè„Å™„ÅÑ
    /** cos90 = 0 
     *  SIN90 = 1
     */

    /**
     * ÊôÇË®àÂõû„Çä
     * @param rotationPoint ÂõûËª¢Ëª∏
     * @param beforeRotation ÂõûËª¢Ââç„ÅÆÁä∂ÊÖã
     * @returns 
     */
    clockwise({
        rotationPoint,
        beforeRotation
    }){
        
        let afterRotation = {x:0,y:0}
        afterRotation.x = 
            (beforeRotation.x - rotationPoint.x) * 0
            -
            (beforeRotation.y - rotationPoint.y) * 1
            + 
            rotationPoint.x

        afterRotation.y =
            (beforeRotation.x - rotationPoint.x) * 1
            +
            (beforeRotation.y - rotationPoint.y) * 0
            +
            rotationPoint.y

        return afterRotation
    }

    /**
     * ÂèçÊôÇË®àÂõû„Çä
     * @param rotationPoint ÂõûËª¢Ëª∏
     * @param beforeRotation ÂõûËª¢Ââç„ÅÆÁä∂ÊÖã
     * @returns 
     */
    counterClockwise({
        rotationPoint,
        beforeRotation
    }){
        let afterRotation = {x:0,y:0}
        afterRotation.x = 
            (beforeRotation.x - rotationPoint.x) * 0
            -
            (beforeRotation.y - rotationPoint.y) * -1
            + 
            rotationPoint.x

        afterRotation.y =
            (beforeRotation.x - rotationPoint.x) * -1
            +
            (beforeRotation.y - rotationPoint.y) * 0
            +
            rotationPoint.y

        return afterRotation
    }

    /** „Åô„Åß„Å´„Åä„ÅÑ„Å¶„ÅÑ„Çã„Å∂„Å§„Åã„Çã„Çà„ÅÜ„Å†„Å£„Åü„Çâ„Å°„Çá„Å£„Å®ÁßªÂãï„Åô„Çã
     *  „Åô„Åß„Å´„Åä„ÅÑ„Å¶„ÅÇ„Çã„Éñ„É≠„ÉÉ„ÇØ„Å®„Åã„Å∂„Çâ„Å™„ÅÑ„ÅãÁ¢∫Ë™ç„Å®Ë¢´„Å£„Å¶„ÅÑ„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
     *  Áµ∂ÂØæ„Å´Âõû„Åõ„Å™„ÅÑÁä∂Ê≥Å„Åß„ÅØ„Å™„ÅÑ„Åì„Å®„ÅØÂà•„ÅÆÈñ¢Êï∞„ÅßË®ºÊòé„Åï„Çå„Åü
     * 
     * @param Field ‰ªäÁèæÂú®„ÅÆ„Éï„Ç£„Éº„É´„Éâ
     * @param tetriminoCoordinate „Éñ„É≠„ÉÉ„ÇØ„ÅÆÂ∫ßÊ®ô
     * @param rotationPoint ÂõûËª¢Ëª∏
     */
    checkIfThereIsACoveredBlock({
        Field,
        tetriminoCoordinate,
        rotationIndex,
    }){
        // „Åù„ÅÆ„Åæ„Åæ‰Ωø„ÅÜ„Å®ÂèÇÁÖßÂÖÉ„ÅåÂ§â„Çè„Å£„Å¶„Åó„Åæ„ÅÜ„Åü„ÇÅÔΩ°
        /** „Åæ„ÅüÂà•„ÅÆ‰ªÆ„ÅÆÁä∂ÊÖã„ÅÆÂ§âÊï∞ */
        let tentativeCoordinate = JSON.parse(JSON.stringify(tetriminoCoordinate))
        // console.log("before",JSON.stringify(tentativeCoordinate))

        // ‰∏ª„Å´‰∏ã„Å´„Åö„Çâ„Åô„Éë„Çø„Éº„É≥
        let shiftedDown = this.shiftToDown({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate)),
            rotationIndex:rotationIndex
        })

        tentativeCoordinate = JSON.parse(JSON.stringify(shiftedDown))

        // Á¢∫Ë™ç„Åô„ÇãÈ†ÜÁï™„ÅåÂïèÈ°å„Å´„Å™„Çã(‰∏ª„Å´Âè≥ÂõûËª¢„ÅßËµ∑„Åç„Çã)
        // „Å®„Çä„ÅÇ„Åà„Åö‰ªä„ÅØÂº∑Âºï„Å´2ÂõûÁ¢∫Ë™ç?

        let noProblem = true
        for (let tentativeBlock of tentativeCoordinate) {
            if (Field[tentativeBlock.y][tentativeBlock.x].isFill == true
                &&
                Field[tentativeBlock.y][tentativeBlock.x].isMoving == false
            ) { noProblem = false }
        }

        if (noProblem) { return tentativeCoordinate }
        
        // Âº∑Âºï„Å´Êõ¥„Å´„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Åô„Çã
        shiftedDown = this.shiftToDown({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tentativeCoordinate)), //Á∑®ÈõÜ„Åó„Åü„ÇÑ„Å§„ÇíÂÖ•„Çå„Çã
            rotationIndex:rotationIndex
        })

        tentativeCoordinate = JSON.parse(JSON.stringify(shiftedDown))

        /** 
         * ‰∏ã„Å´„Åö„Çâ„Åó„Åü„Éë„Çø„Éº„É≥„Åß„Åæ„Å†Ë¢´„Å£„Å¶„ÅÑ„Çã„Åã„Å©„ÅÜ„ÅãÁ¢∫Ë™ç„Åô„Çã
         * Â§ß‰∏àÂ§´„Å™„ÇâÊäú„Åë„Çã
         * ÈßÑÁõÆ„Å™„Çâ‰∏ä„Å´„Åö„Çâ„Åô„Éë„Çø„Éº„É≥
         */

        noProblem = true
        for (let tentativeBlock of tentativeCoordinate) {
            if (Field[tentativeBlock.y][tentativeBlock.x].isFill == true
                &&
                Field[tentativeBlock.y][tentativeBlock.x].isMoving == false
            ) { noProblem = false }
        }

        if (noProblem) { return tentativeCoordinate }

        let shiftedUp = this.shiftToUp({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate)),
            rotationIndex:rotationIndex
        })

        tentativeCoordinate = JSON.parse(JSON.stringify(shiftedUp))

        // „Åì„Åì„Åæ„ÅßÊù•„Å¶„Å†„ÇÅ„Å™Â†¥Âêà„ÅØÂõû„Åõ„Å™„Åã„Å£„Åü„Å£„Å¶„Åì„Å®
        for (let tentativeBlock of tentativeCoordinate) {
            if (Field[tentativeBlock.y][tentativeBlock.x].isFill == true
                &&
                Field[tentativeBlock.y][tentativeBlock.x].isMoving == false
            ) {
                /** Ë¢´„Å£„Å¶„ÅÑ„ÇãÁä∂ÊÖã 
                 *  Êú¨Êù•„Å™„ÇâÂõû„Åõ„Å™„ÅÑÁä∂ÊÖã„Å†„Å£„Åü„Å®„ÅÑ„ÅÜ„Åì„Å®„ÅÆ„ÅßÂá¶ÁêÜ„Çí‰∏≠Êñ≠„Åï„Åõ„Çã
                */ 
                throw "can't rotation"
            }
        }

        // console.log("after",JSON.stringify(tentativeCoordinate));
        return tentativeCoordinate
    }

    shiftToUp({
        Field,
        tetriminoCoordinate,
        rotationIndex,
    }){
        // ‰∏ä‰∏ãÁ¢∫Ë™ç
        tetriminoCoordinate = this.ReturnTheTopAndBottomOverhangingBlocksToTheField(tetriminoCoordinate)

        // Â∑¶Âè≥Á¢∫Ë™ç
        tetriminoCoordinate = this.ReturnTheLeftAndRightOverhangingBlocksToTheField_shiftUp({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate))
        })
        /** „Åä„ÅÑ„Å¶„ÅÇ„Çã„Éñ„É≠„ÉÉ„ÇØ„Å®Ë¢´„Å£„Å¶„ÅÑ„Çã„Çà„ÅÜ„Å™„ÇâÁßªÂãï„Åô„Çã  */
        for (let tentativeBlock of tetriminoCoordinate) {
            try {
                if (Field[tentativeBlock.y][tentativeBlock.x].isFill == true
                    &&
                    Field[tentativeBlock.y][tentativeBlock.x].isMoving == false) {
    
                    let rotationPoint = tetriminoCoordinate[rotationIndex]
                    // ÈÄî‰∏≠„ÅßË®àÁÆóÂºè„ÅåÁãÇ„Çè„Å™„ÅÑ„Çà„ÅÜ„Å´Â§âÊï∞„Å´‰øùÂ≠ò„Åó„Å¶„Åä„Åè
                    // „Åù„ÅÆ„Åæ„Åæ„ÇÑ„Å£„Åü„ÇâËâ≤„ÄÖÁãÇ„Å£„Å¶„Åó„Åæ„Å£„ÅüÔΩ°
                    let amountOfMove = {
                        x:rotationPoint.x - tentativeBlock.x,
                        y:rotationPoint.y - tentativeBlock.y
                    }
    
                    // console.log("amountOfMove",amountOfMove);
    
                    // Ë™¨ÊòéÈõ£„Åó„ÅÑ„Åë„Å©
                    // „Å®„Å´„Åã„ÅèÈáç„Å™„Å£„Å¶„ÅÑ„Çã„Åã„Çâ‰∏ä„Å´„Åö„Çâ„Åó„Å¶Ë¶ã„Çã
                    if (amountOfMove.y == 0) { amountOfMove.y = 1 }
                    tetriminoCoordinate.forEach(block => {
                        block.x += amountOfMove.x,
                        block.y += amountOfMove.y
                    });
                }
            } catch (error) { console.log(error); }
        }

        // „ÇÇ„ÅÜ‰∏ÄÂ∫¶‰∏ä‰∏ãÁ¢∫Ë™ç
        tetriminoCoordinate = this.ReturnTheTopAndBottomOverhangingBlocksToTheField(tetriminoCoordinate)

        // „ÇÇ„ÅÜ‰∏ÄÂ∫¶Â∑¶Âè≥Á¢∫Ë™ç
        tetriminoCoordinate = this.ReturnTheLeftAndRightOverhangingBlocksToTheField_shiftUp({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate))
        })

        return tetriminoCoordinate
    }

    shiftToDown({
        Field,
        tetriminoCoordinate,
        rotationIndex,
    }){
        // ‰∏ä‰∏ãÁ¢∫Ë™ç
        tetriminoCoordinate = this.ReturnTheTopAndBottomOverhangingBlocksToTheField(tetriminoCoordinate)

        // Â∑¶Âè≥Á¢∫Ë™ç
        tetriminoCoordinate = this.ReturnTheLeftAndRightOverhangingBlocksToTheField_shiftDown({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate))
        })
        
        /** „Åä„ÅÑ„Å¶„ÅÇ„Çã„Éñ„É≠„ÉÉ„ÇØ„Å®Ë¢´„Å£„Å¶„ÅÑ„Çã„Çà„ÅÜ„Å™„ÇâÁßªÂãï„Åô„Çã  */
        for (let tentativeBlock of tetriminoCoordinate) {
            try {
                if (Field[tentativeBlock.y][tentativeBlock.x].isFill == true
                    &&
                    Field[tentativeBlock.y][tentativeBlock.x].isMoving == false) {
    
                    let rotationPoint = tetriminoCoordinate[rotationIndex]
                    // ÈÄî‰∏≠„ÅßË®àÁÆóÂºè„ÅåÁãÇ„Çè„Å™„ÅÑ„Çà„ÅÜ„Å´Â§âÊï∞„Å´‰øùÂ≠ò„Åó„Å¶„Åä„Åè
                    // „Åù„ÅÆ„Åæ„Åæ„ÇÑ„Å£„Åü„ÇâËâ≤„ÄÖÁãÇ„Å£„Å¶„Åó„Åæ„Å£„ÅüÔΩ°
                    let amountOfMove = {
                        x:rotationPoint.x - tentativeBlock.x,
                        y:rotationPoint.y - tentativeBlock.y
                    }
    
                    // console.log("amountOfMove",amountOfMove);
    
                    // Ë™¨ÊòéÈõ£„Åó„ÅÑ„Åë„Å©
                    // „Å®„Å´„Åã„ÅèÈáç„Å™„Å£„Å¶„ÅÑ„Çã„Åã„Çâ‰∏ã„Å´„Åö„Çâ„Åó„Å¶Ë¶ã„Çã
                    if (amountOfMove.y == 0) { amountOfMove.y = -1 }
                    tetriminoCoordinate.forEach(block => {
                        block.x += amountOfMove.x,
                        block.y -= amountOfMove.y
                    });
                }
            } catch (error) { console.log(error); }
        }

        // „ÇÇ„ÅÜ‰∏ÄÂ∫¶‰∏ä‰∏ãÁ¢∫Ë™ç
        tetriminoCoordinate = this.ReturnTheTopAndBottomOverhangingBlocksToTheField(tetriminoCoordinate)

        // „ÇÇ„ÅÜ‰∏ÄÂ∫¶Â∑¶Âè≥Á¢∫Ë™ç
        tetriminoCoordinate = this.ReturnTheLeftAndRightOverhangingBlocksToTheField_shiftDown({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate))
        })

        return tetriminoCoordinate
    }

    ReturnTheTopAndBottomOverhangingBlocksToTheField(tetriminoCoordinate){
        /** Â§©‰∫ï */
        tetriminoCoordinate = this.PushOutFromTheFloor(JSON.parse(JSON.stringify(tetriminoCoordinate)))

        /** Â∫ä */
        tetriminoCoordinate = this.PushOutFromTheFloor(JSON.parse(JSON.stringify(tetriminoCoordinate)))

        return tetriminoCoordinate
    }

    ReturnTheLeftAndRightOverhangingBlocksToTheField_shiftUp({
        Field,
        tetriminoCoordinate
    }){
    /** Â∑¶„ÅÆÂ£Å */
    let hidarikabe = this.PushOutFromTheLeftWall(
        JSON.parse(JSON.stringify(tetriminoCoordinate))
    )

    tetriminoCoordinate = JSON.parse(JSON.stringify(hidarikabe.tetriminoCoordinate))

    /** Â£Å„Åã„ÇâÂá∫„Åó„Åü„ÅÇ„Å®„Å´„Åä„ÅÑ„Å¶„ÅÇ„Çã„Éñ„É≠„ÉÉ„ÇØ„Å®Ë¢´„Å£„Å¶„ÅÑ„Åü„Çâ1„Å§‰∏ä„Åí„Çã */
    if (hidarikabe.moved) {
        tetriminoCoordinate= this.MoveVerticallyFromCoveringBlock({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate)),
            amountOfMoveY:-1
        })
    }

    /** Âè≥„ÅÆÂ£Å */
    let migikabe = this.PushOutFromTheRightWall(
        JSON.parse(JSON.stringify(tetriminoCoordinate))
    )

    tetriminoCoordinate = JSON.parse(JSON.stringify(migikabe.tetriminoCoordinate))

    /** Â£Å„Åã„ÇâÂá∫„Åó„Åü„ÅÇ„Å®„Å´„Åä„ÅÑ„Å¶„ÅÇ„Çã„Éñ„É≠„ÉÉ„ÇØ„Å®Ë¢´„Å£„Å¶„ÅÑ„Åü„Çâ1„Å§‰∏ä„Åí„Çã */
    if (migikabe.moved) {
        tetriminoCoordinate = this.MoveVerticallyFromCoveringBlock({
            Field:JSON.parse(JSON.stringify(Field)),
            tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate)),
            amountOfMoveY:-1
        })
    }

    return tetriminoCoordinate
}

    ReturnTheLeftAndRightOverhangingBlocksToTheField_shiftDown({
            Field,
            tetriminoCoordinate
        }){
        /** Â∑¶„ÅÆÂ£Å */
        let hidarikabe = this.PushOutFromTheLeftWall(
            JSON.parse(JSON.stringify(tetriminoCoordinate))
        )

        tetriminoCoordinate = JSON.parse(JSON.stringify(hidarikabe.tetriminoCoordinate))

        /** Â£Å„Åã„ÇâÂá∫„Åó„Åü„ÅÇ„Å®„Å´„Åä„ÅÑ„Å¶„ÅÇ„Çã„Éñ„É≠„ÉÉ„ÇØ„Å®Ë¢´„Å£„Å¶„ÅÑ„Åü„Çâ1„Å§‰∏ã„Åí„Çã */
        if (hidarikabe.moved) {
            tetriminoCoordinate= this.MoveVerticallyFromCoveringBlock({
                Field:JSON.parse(JSON.stringify(Field)),
                tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate)),
                amountOfMoveY:1
            })
        }

        /** Âè≥„ÅÆÂ£Å */
        let migikabe = this.PushOutFromTheRightWall(
            JSON.parse(JSON.stringify(tetriminoCoordinate))
        )

        tetriminoCoordinate = JSON.parse(JSON.stringify(migikabe.tetriminoCoordinate))

        /** Â£Å„Åã„ÇâÂá∫„Åó„Åü„ÅÇ„Å®„Å´„Åä„ÅÑ„Å¶„ÅÇ„Çã„Éñ„É≠„ÉÉ„ÇØ„Å®Ë¢´„Å£„Å¶„ÅÑ„Åü„Çâ1„Å§‰∏ã„Åí„Çã */
        if (migikabe.moved) {
            tetriminoCoordinate = this.MoveVerticallyFromCoveringBlock({
                Field:JSON.parse(JSON.stringify(Field)),
                tetriminoCoordinate:JSON.parse(JSON.stringify(tetriminoCoordinate)),
                amountOfMoveY:1
            })
        }

        return tetriminoCoordinate
    }

    /** ÂÆåÂÖ®„Å´Âá∫„Å¶„Åè„Çã„Åæ„ÅßÁπ∞„ÇäËøî„Åô„Åü„ÇÅwhile */

    PushOutFromTheFloor(tetriminoCoordinate){
        for (let tentativeBlock of tetriminoCoordinate) {
            while (tentativeBlock.y > this.fieldHeight) {
                tetriminoCoordinate.forEach(block => { block.y -= 1 });
            }
        }

        return tetriminoCoordinate
    }

    PushOutFromTheRoof(tetriminoCoordinate){
        for (let tentativeBlock of tetriminoCoordinate) {
            while (tentativeBlock.y < 0) {
                tetriminoCoordinate.forEach(block => { block.y += 1 });
            }
        }

        return tetriminoCoordinate
    }

    PushOutFromTheLeftWall(tetriminoCoordinate){
        let moved = false
        for (let tentativeBlock of tetriminoCoordinate) {
            while (tentativeBlock.x < 0) {
                tetriminoCoordinate.forEach(block => { block.x += 1 });
                moved = true
            }
        }

        return {
            tetriminoCoordinate:tetriminoCoordinate,
            moved:moved
        }
    }

    PushOutFromTheRightWall(tetriminoCoordinate){
        let moved = false
        for (let tentativeBlock of tetriminoCoordinate) {
            while (tentativeBlock.x > this.fieldWidth) {
                tetriminoCoordinate.forEach(block => { block.x -= 1 });
                moved = true
            }
        }

        return {
            tetriminoCoordinate:tetriminoCoordinate,
            moved:moved
        }
    }

    /**
     * XËª∏„Å´„Åö„Çâ„Åó„ÅüÂ∫ßÊ®ô„ÇíËøî„Åô 
     * @param  Field „Éï„Ç£„Éº„É´„Éâ„ÅÆÁä∂ÊÖã
     * @param  tetriminoCoordinate „Éñ„É≠„ÉÉ„ÇØ„ÅÆÂ∫ßÊ®ô
     * @param  amountOfMoveX ÁßªÂãïÈáè 
     * @returns „Éñ„É≠„ÉÉ„ÇØ„ÅÆÂ∫ßÊ®ô
     */
    MoveHorizontallyFromCoveringBlock({
        Field,
        tetriminoCoordinate,
        amountOfMoveX
    }){
        let tentativeCoordinate = JSON.parse(JSON.stringify(tetriminoCoordinate));
        for (let tentativeBlock of tentativeCoordinate){
            if (Field[tentativeBlock.y][tentativeBlock.x].isFill == true
                &&
                Field[tentativeBlock.y][tentativeBlock.x].isMoving == false) {
                tentativeCoordinate.forEach(block => { block.x +=  amountOfMoveX});
            }
        }

        return tentativeCoordinate
    }

    /**
     * YËª∏„Å´„Åö„Çâ„Åó„ÅüÂ∫ßÊ®ô„ÇíËøî„Åô 
     * @param  Field „Éï„Ç£„Éº„É´„Éâ„ÅÆÁä∂ÊÖã
     * @param  tetriminoCoordinate „Éñ„É≠„ÉÉ„ÇØ„ÅÆÂ∫ßÊ®ô
     * @param  amountOfMoveY ÁßªÂãïÈáè 
     * @returns „Éñ„É≠„ÉÉ„ÇØ„ÅÆÂ∫ßÊ®ô
     */
    MoveVerticallyFromCoveringBlock({
        Field,
        tetriminoCoordinate,
        amountOfMoveY
    }){
        for (let tentativeBlock of tetriminoCoordinate){
            if (Field[tentativeBlock.y][tentativeBlock.x].isFill == true
                &&
                Field[tentativeBlock.y][tentativeBlock.x].isMoving == false) {
                tetriminoCoordinate.forEach(block => { block.y +=  amountOfMoveY});
            }
        }

        return tetriminoCoordinate
    }
}